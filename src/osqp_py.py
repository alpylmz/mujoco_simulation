import osqp
import numpy as np
from scipy import sparse

# Define problem data
P = sparse.csc_matrix(
[
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ], 
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ], 
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ], 
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ], 
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ], 
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ], 
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ], 
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ], 
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ], 
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ], 
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ], 
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ], 
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ], 
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ], 
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ], 
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ], 
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ], 
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ], 
]
)
# write the row and column indices of the non-zero elements
print("P: size = ", P.shape)
print("P.data, P.data.shape = ", P.data.shape)
print(P.data)
print("P.indices, P.indices.shape = ", P.indices.shape)
print(P.indices)
print("P.indptr, P.indptr.shape = ", P.indptr.shape)
print(P.indptr)
q = np.array([0] * 18)
A = sparse.csc_matrix(
[
    [1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ], 
    [0, 1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ], 
    [0, 0, 1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, ], 
    [0, 0, 0, 1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, ], 
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, ], 
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, ], 
    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, -26.7915, -0.0311736, 27.0551, -0.0652461, -0.118002, 0.00488154, ], 
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, -0.0311736, -1.81138, -0.411885, -3.44578, 0.566918, 0.548372, ], 
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 27.0551, -0.411885, -44.5692, -1.06325, 22.5634, -0.0418203, ], 
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, -0.0652461, -3.44578, -1.06325, -8.33823, 2.83565, 0.504635, ], 
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, -0.118002, 0.566918, 22.5634, 2.83565, -60.2623, 1.07481, ], 
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.00488154, 0.548372, -0.0418203, 0.504635, 1.07481, -31.8364, ], 
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, ], 
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, ], 
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, ], 
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, ], 
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, ], 
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, ], 
]
)
# write the row and column indices of the non-zero elements
print("A: size = ", A.shape)
print("A.data, A.data.shape = ", A.data.shape)
print(A.data)
print("A.indices, A.indices.shape = ", A.indices.shape)
print(A.indices)
print("A.indptr, A.indptr.shape = ", A.indptr.shape)
print(A.indptr)
l = np.array([-18.2137, -32.2968, 50.2167, -84.1126, -51.0714, -80.4248, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50, -50])
u = np.array([-18.2137, -32.2968, 50.2167, -84.1126, -51.0714, -80.4248, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50])

# Create an OSQP object
prob = osqp.OSQP()

# Setup workspace and change alpha parameter
prob.setup(P, q, A, l, u, alpha=1.0)

# Solve problem
res = prob.solve()

# Print the solution
print(res.x)




