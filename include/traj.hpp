#include <math.h>
#include <iostream>
#include <fstream>

#include <mujoco/mujoco.h>

#include <config.hpp>

struct {
    // this is used to signal that a new trajectory has been loaded, true when a new trajectory is loaded, false otherwise
    bool new_traj = true; 
    // in some experiments the trajectory following may start at a different position, 
    // therefore we first need to make sure that the robot is at the correct position before starting the trajectory, 
    // this variable makes sure that the time goals for the trajectory aligns
    double traj_start_time;
    // traj index must start from 1, otherwise calculate_goal will give incorrect results. 
    int traj_index = 1;
    // This is tolerance for the joint space
    double GOAL_TOLERANCE = 0.1;
    bool went_to_init = false;
} TrajectoryVars;


double position_array[][6] = {
{1.4066548095005627, -1.0403173854057077, -0.6233616747861418, -2.152026195913708, -0.6077382184158601, 1.3023911968178346},
{1.4177364274120852, -1.0233892858018554, -0.6442376276303465, -2.1333286842083377, -0.6170004379268221, 1.3109296875916479},
{1.4293871537770155, -1.0063270450125363, -0.6653727471989962, -2.114034602159731, -0.6256690481728711, 1.3193389849620039},
{1.4416383667504573, -0.9891406657296427, -0.6868092858548324, -2.094140086005312, -0.6337405548497227, 1.3276108350121574},
{1.4545250250868678, -0.9718405733971873, -0.7085933751344646, -2.0736399328211856, -0.6412116759563535, 1.3357363500528463},
{1.4680863016330177, -0.9544379457588418, -0.7307753954615979, -2.0525274462810845, -0.6480794421864019, 1.343705794569872},
{1.4823663103641265, -0.9369451297223995, -0.7534104106596866, -2.0307942602505107, -0.6543413546916264, 1.351508327476467},
{1.4974149444015432, -0.9193761772112097, -0.7765586479448806, -2.0084301359516177, -0.6599956274437039, 1.3591316860923048},
{1.5132888423868955, -0.9017475344278251, -0.8002860151646418, -1.9854227260057757, -0.6650415434811744, 1.3665617965530663},
{1.530052500386246, -0.8840789299987262, -0.8246646378532855, -1.9617572968882464, -0.6694799647289824, 1.3737822908176476},
{1.5477795435119475, -0.8663945216469812, -0.8497733837352786, -1.9374163990766267, -0.6733140490555146, 1.3807739047851706},
{1.5665541633028421, -0.8487243788112898, -0.8756983184805889, -1.9123794713156865, -0.6765502466422514, 1.3875137251873153},
{1.5864727095338704, -0.8311063999425577, -0.9025329991003939, -1.886622361871278, -0.6791996713971821, 1.3939742450953467},
{1.6076453918920919, -0.8135887867559554, -0.9303784536508339, -1.8601167453715572, -0.6812799721142894, 1.400122179894387},
{1.630197987267378, -0.7962332193417072, -0.9593426088066097, -1.8328294090163895, -0.6828178606341255, 1.4059169895713675},
{1.6542733463485169, -0.7791188858239597, -0.9895387995734367, -1.8047213771164816, -0.6838524842051426, 1.4113090537424309},
{1.6800323266321913, -0.7623474972611921, -1.0210828183763245, -1.775746839582991, -0.6844398417467901, 1.41623746235834},
{1.7076535223637566, -0.746049322714775, -1.0540877350683966, -1.7458518509092902, -0.6846584067969006, 1.4206274343708702},
{1.737330798414344, -0.7303900415116191, -1.0886554781050348, -1.714972776616377, -0.684615974083889, 1.4243874872522313},
{1.769267190941305, -0.715577725658787, -1.1248640184605159, -1.6830344917504187, -0.6844573935416082, 1.427406692536926},
{1.8036633557734119, -0.7018684173487213, -1.1627491925489335, -1.64994838930109, -0.6843721660465288, 1.4295527082001085},
{1.8406988042169852, -0.6895675187584309, -1.2022811938440152, -1.6156103358009846, -0.6845997561893128, 1.4306717779559723},
{1.8805053751854146, -0.6790228453816639, -1.2433381468084101, -1.5798987888266525, -0.6854290690688581, 1.4305923922951882},
{1.9231356187032596, -0.6706046653094366, -1.2856832153259994, -1.5426732776317036, -0.6871875578137876, 1.429134401671069},
{1.9685341562159304, -0.6646700987668447, -1.328956255704061, -1.503773180900524, -0.6902164038219325, 1.4261243476303107},
{2.0165254762345173, -0.6615154116352968, -1.372692522719848, -1.4630160572669146, -0.6948328207479425, 1.4214150713375466},
{2.0668319687920502, -0.661328714401336, -1.4163746213023787, -1.4201937564662215, -0.7012883928410865, 1.4149039176552638},
{2.1191269460370163, -0.6641613949841059, -1.4595092439257824, -1.375063589935656, -0.7097388640279023, 1.406541599115912},
{2.173112140503736, -0.6699322874231609, -1.5017059387100562, -1.3273314180416471, -0.7202393964265043, 1.3963257732809142},
{2.2285993720905592, -0.6784646509927569, -1.5427338410643903, -1.276623261068473, -0.7327688875223242, 1.3842791156663827},
{2.2855811400006263, -0.6895428329623394, -1.5825467494179268, -1.2224403521499054, -0.747275288118035, 1.3704165937352597},
{2.306824024229755, -0.6886846460211091, -1.5888492773309661, -1.217009659222155, -0.7471673082254281, 1.3696424804081204},
{2.328962850260148, -0.6881291488242963, -1.595685281586673, -1.21067242257209, -0.7473906932799911, 1.3685620983191984},
{2.351997954359192, -0.687897384655077, -1.6030422896925605, -1.2034092890029369, -0.7479621357869675, 1.3671629649707775},
{2.3759299759389925, -0.6880107153341201, -1.6109067660563183, -1.195197460538394, -0.7488988321767714, 1.3654319049519286},
{2.4007600873696795, -0.6884906385534245, -1.6192643541372895, -1.1860103953730794, -0.7502184073640067, 1.363355072577782},
{2.4264903877323154, -0.6893586509817123, -1.6281002129563364, -1.175817275811559, -0.7519388658954698, 1.36091791523992},
{2.453124438499233, -0.6906361525699561, -1.6373994372660121, -1.1645823364162255, -0.7540785872297978, 1.3581050938246322},
{2.4806679698428615, -0.6923444093583421, -1.647147569126547, -1.1522640117427494, -0.7566563822140748, 1.3549003456459203},
{2.5091297938449415, -0.6945045946228746, -1.6573312110614122, -1.1388138486164743, -0.7596916315427885, 1.3512862720765095},
{2.5385229734904873, -0.697137931888538, -1.6679387560646766, -1.1241751061933292, -0.7632045314424564, 1.3472440275501674},
{2.5688663164009378, -0.7002659685382646, -1.6789612589904583, -1.10828093509287, -0.7672164789230221, 1.3427528785354648},
{2.600186294154152, -0.7039110176689464, -1.6903934888337142, -1.0910519781270267, -0.7717506389755431, 1.3377895886371798},
{2.6325195395901373, -0.7080968199314417, -1.7022352266253493, -1.0723931594190188, -0.7768327536502688, 1.3323275661478666},
{2.6659161585413313, -0.7128495016236949, -1.7144929144202263, -1.0521893069148334, -0.7824922809218531, 1.3263356779775965},
{2.700444232695381, -0.7181989473217856, -1.72718182888852, -1.0302990518112503, -0.7887639991127022, 1.3197765798556518},
{2.6418562059173687, -0.6977584724099336, -1.6927919442768917, -1.0978980046453983, -0.7664005548811194, 1.3401602732943685},
{2.5862005995627744, -0.6790361436957462, -1.6583254319602954, -1.1591640083987145, -0.7457595338432792, 1.358630424401121},
{2.5324231614652373, -0.6619192339550155, -1.6231841239203122, -1.215565345315946, -0.7265923256022458, 1.3754966413724334},
{2.47987545979224, -0.6464514948923653, -1.5869425370433001, -1.2680422044146875, -0.7088191718085876, 1.3909045340373827},
{2.428173407082243, -0.6327914586817929, -1.5492937091945964, -1.317241184556377, -0.6924749374978281, 1.4048983644110775},
{2.377152602932784, -0.6211883347602106, -1.5100482089477858, -1.363623261160237, -0.677679404138251, 1.4174507205577935},
{2.3268562160798023, -0.6119531166307509, -1.4691584370667217, -1.4075262515250437, -0.6646069345797874, 1.428485563618184},
{2.2775273472394497, -0.6054131745383728, -1.4267527569052585, -1.4492049493260495, -0.6534447044494054, 1.4379036964744434},
{2.229580391058672, -0.6018466998249815, -1.3831579341068452, -1.4888597969449864, -0.644336670636822, 1.4456143678812094},
{2.1835333306623386, -0.6014080630103725, -1.3388842977025284, -1.5266585800343215, -0.6373232744197533, 1.4515698464301923},
{2.1399044828171143, -0.6040708074909824, -1.2945589789571457, -1.5627518487885823, -0.6322993924809476, 1.4557927501999202},
{2.099105275113613, -0.6096164985355893, -1.2508209532663974, -1.5972813745956926, -0.6290126396186375, 1.458384483626965},
{2.061370831989948, -0.6176765214060684, -1.2082176120479418, -1.630382037598301, -0.6271049684065012, 1.4595110752019804},
{2.026749339316811, -0.6278052411965677, -1.167141257819602, -1.6621795864559819, -0.6261768161522463, 1.4593744904037993},
{1.9951383958366151, -0.6395516747125699, -1.1278171340340832, -1.6927874786527564, -0.6258456694621759, 1.4581828628014535},
{1.966340012181877, -0.6525081398439393, -1.0903284872171901, -1.7223049495731033, -0.6257824009372116, 1.456129151654572},
{1.9401110161331232, -0.6663324017968699, -1.054656198762543, -1.7508168388945629, -0.625724476823643, 1.453380454153418},
{1.916198889469163, -0.6807505739437506, -1.0207167782738988, -1.7783947082924216, -0.6254735791359788, 1.4500754964238938},
{1.8943628959042091, -0.6955498483411449, -0.9883917645613294, -1.805098569778161, -0.6248858661070653, 1.4463267390100767},
{1.8743843138519691, -0.7105676387459678, -0.9575477439165552, -1.8309787215428899, -0.6238604180512625, 1.442224353474319},
{1.8560698743637374, -0.7256807195458904, -0.9280487777994172, -1.8560774259507906, -0.6223286435852663, 1.4378404900702062},
{1.839251476848656, -0.7407958537005334, -0.8997634985242267, -1.8804303328789553, -0.6202456208902059, 1.4332331175924666},
{1.8237841311839467, -0.7558422732451695, -0.8725687605841631, -1.9040676416862987, -0.6175834435676342, 1.4284492064683092},
{1.8095432379605216, -0.7707658779174792, -0.84635119457852, -1.9270150328535105, -0.6143262860126004, 1.423527257515123},
{1.7964217873529338, -0.7855248537729101, -0.8210075483435109, -1.949294410507117, -0.6104668218567448, 1.4184992665908676},
{1.7843277493431793, -0.8000864005855787, -0.7964443674249194, -1.9709244950635905, -0.6060036597544773, 1.4133922345905159},
{1.7731817611817442, -0.8144242994648541, -0.7725773472034174, -1.9919212990973802, -0.600939525084793, 1.4082293234174332},
{1.7629151331524573, -0.8285171073620201, -0.7493305503914979, -2.012298512802634, -0.5952799809808593, 1.4030307410255658},
{1.7534681540651933, -0.8423468160121412, -0.7266355987667608, -2.032067819506547, -0.5890325365655036, 1.3978144206958023},
{1.7447886622031834, -0.8558978543867688, -0.7044308972644675, -2.051239156850436, -0.5822060321856737, 1.3925965442212511},
{1.7303007304408615, -0.8764262676840252, -0.6975695815256542, -2.060983709699601, -0.5889731621844972, 1.3817057047793504},
{1.7159978503928737, -0.8966081936405299, -0.6911610580288753, -2.070136612485319, -0.5956104891148073, 1.370676487499539},
{1.7018781781346106, -0.9164464814089592, -0.6851878637345197, -2.0786991837917244, -0.6021473549757578, 1.3595175413076055},
{1.6879407778878175, -0.9359425483929112, -0.679634077567001, -2.08667257714222, -0.6086114429712594, 1.3482378665748402},
{1.6741855436172426, -0.9550966107545995, -0.6744850805709658, -2.0940578759384936, -0.6150289656776106, 1.3368468256713246},
{1.6606131493798124, -0.9739078571869841, -0.6697273641732631, -2.1008561374848616, -0.6214247889937949, 1.3253541255192092},
{1.6472249986793872, -0.9923746044835999, -0.6653483594725509, -2.107068433542054, -0.627822529813383, 1.3137697979819911},
{1.634023172573751, -1.0104944376978793, -0.6613362850939324, -2.1126958874548842, -0.6342446320139552, 1.3021041783767482},
{1.6210103763205765, -1.028264337012397, -0.6576800117050347, -2.1177397078485356, -0.6407124246019823, 1.2903678823908706},
{1.6081898844102605, -1.045680792920357, -0.6543689417292182, -2.1222012188653925, -0.6472461652779978, 1.278571781703352},
{1.5955654838342728, -1.062739910925034, -0.6513929030919106, -2.126081886978818, -0.6538650723426233, 1.2667269787597748},
{1.5831414156671442, -1.0794375066300794, -0.6487420562024684, -2.1293833442665444, -0.660587347255795, 1.2548447809246777},
{1.5709223149637213, -1.0957691918764585, -0.6464068134647919, -2.1321074082071814, -0.6674301901235281, 1.2429366745411607},
{1.5589131491733663, -1.1117304523804403, -0.6443777708370882, -2.134256097947999, -0.6744098099048033, 1.231014299244393},
{1.5471191553786443, -1.1273167172117768, -0.6426456510470956, -2.1358316470132976, -0.6815414309364238, 1.2190894228724916},
};
double time_array[] = {0.0, 0.101329198, 0.156840625, 0.199926638, 0.23689734, 0.269975514, 0.300229744, 0.328519609, 0.355298434, 0.381217711, 0.406871602, 0.433359403, 0.460776701, 0.489226719, 0.518819725, 0.549671516, 0.581900399, 0.615621898, 0.650940154, 0.687934831, 0.726642544, 0.767032839, 0.808981194, 0.852536999, 0.898921201, 0.947954478, 0.999353193, 1.052783566, 1.112511004, 1.187417545, 1.323901279, 1.422162749, 1.468360046, 1.505188223, 1.537495926, 1.566948788, 1.5945787280000001, 1.621791041, 1.64993258, 1.679012349, 1.709043695, 1.740045833, 1.774697223, 1.816227911, 1.8708662280000001, 2.017110476, 2.203041877, 2.282522406, 2.341306573, 2.394995157, 2.447819732, 2.499948268, 2.551336658, 2.601736524, 2.650724474, 2.697771279, 2.743058961, 2.787746599, 2.831274917, 2.873243095, 2.913420999, 2.951723576, 2.988170358, 3.02284665, 3.055873484, 3.087387171, 3.1175266, 3.148820499, 3.181078222, 3.215090332, 3.251408508, 3.2914276, 3.329967415, 3.373984018, 3.429201247, 3.508697725, 3.590871549, 3.6468703270000002, 3.691274331, 3.728931109, 3.7620916749999997, 3.792166812, 3.819704713, 3.847544041, 3.876815147, 3.907881118, 3.941493205, 3.978613185, 4.021555924, 4.076681819, 4.210549882};


double calc_distance(Eigen::Matrix<exp_type, 6, 1> current, double* goal){
    double total_distance = 0;
    for(int i = 0; i < 6; i++){
        total_distance += pow(current[i] - goal[i], 2);
    }
    total_distance = sqrt(total_distance);
    return total_distance;
}

void initialize_output_file(){
    // create INT_BITS_FRAC_BITS directory if it doesn't exist
    std::string which_dir = EXPERIMENT_DIRECTORY + std::to_string(INT_BITS) + "_" + std::to_string(FRAC_BITS) + "/";
    std::filesystem::create_directory(which_dir);
    DATA_FILE.open(which_dir + "data.csv");
    DATA_FILE << "time, q_1, q_2, q_3, q_4, q_5, q_6, qdot_1, qdot_2, qdot_3, qdot_4, qdot_5, qdot_6, u_1, u_2, u_3, u_4, u_5, u_6\n";
    // also create a file for configs and other info
    std::ofstream config_file;
    config_file.open(which_dir + "config.txt");
    config_file << "INT_BITS: " << INT_BITS << "\n";
    config_file << "FRAC_BITS: " << FRAC_BITS << "\n";
    if(OVERFLOW_MODE == OverflowMode::CLAMP){
        config_file << "OVERFLOW_MODE: CLAMP\n";
    } else {
        config_file << "OVERFLOW_MODE: SATURATE\n";
    }
    config_file << "TORQUE_HARD_LIMIT: " << TORQUE_HARD_LIMIT << "\n";
    config_file << "TIME_STEP: " << TIME_STEP << "\n";
}

void save_position(
    Eigen::Matrix<exp_type, 6, 1> curr_position, 
    Eigen::Matrix<exp_type, 6, 1> curr_vel, 
    Eigen::Matrix<exp_type, 6, 1> u, 
    double time){
    if(TrajectoryVars.went_to_init == false) return;

    DATA_FILE << time << ", ";
    for(int i = 0; i < 6; i++){
        DATA_FILE << curr_position[i] << ", ";
    }
    for(int i = 0; i < 6; i++){
        DATA_FILE << curr_vel[i] << ", ";
    }
    for(int i = 0; i < 6; i++){
        DATA_FILE << u[i] << ", ";
    }
    DATA_FILE << "\n";
    return;
}

void calculate_goal(
    Eigen::Matrix<exp_type, 6, 1> curr_position, 
    Eigen::Matrix<exp_type, 6, 1> curr_velocity, 
    double* goal, 
    double traj_time, 
    double sim_time){
    if(TrajectoryVars.went_to_init == false){
        if(calc_distance(curr_position, position_array[0]) < TrajectoryVars.GOAL_TOLERANCE){
            TrajectoryVars.went_to_init = true;
            TrajectoryVars.traj_start_time = sim_time;
        }
        for(int i = 0; i < 6; i++){
            goal[i] = position_array[0][i];
        }
        return;
    }
    // check if we are at the end of the trajectory
    if(TrajectoryVars.traj_index == sizeof(time_array)/sizeof(time_array[0])){
        for(int i = 0; i < 6; i++){
            goal[i] = position_array[TrajectoryVars.traj_index - 1][i];
        }
        return;
    }
    // check if we already passed the current index
    double curr_index_time = time_array[TrajectoryVars.traj_index - 1];
    if(traj_time > curr_index_time){
        TrajectoryVars.traj_index++;
        return calculate_goal(curr_position, curr_velocity, goal, traj_time, sim_time);
    }

    double next_index_time = time_array[TrajectoryVars.traj_index];
    double time_diff = next_index_time - curr_index_time;
    double time_ratio = (traj_time - curr_index_time) / time_diff;

    for(int i = 0; i < 6; i++){
        double position_diff = position_array[TrajectoryVars.traj_index][i] - position_array[TrajectoryVars.traj_index - 1][i];
        goal[i] = position_array[TrajectoryVars.traj_index - 1][i] + position_diff * time_ratio;
    }
}

